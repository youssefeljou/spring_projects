package com.example.book.controller;

import static org.assertj.core.api.Assertions.assertThat;


import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import com.example.book.dto.AutherDto;
import com.example.book.entity.Auther;
import com.example.book.service.AutherService;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class AutherControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	
	@MockBean
	private AutherService autherService;
	
	@Test
	public void findByEmailFoundTest()
	{
		Optional<Auther> autherParam= Optional.of(new Auther(0, "255.0.0.0", "john.doe@example.com",null , null));
		Mockito.when(autherService.findByEmail(Mockito.anyString())).thenReturn(autherParam);
		ResponseEntity<AutherDto> responseEntity= restTemplate.getForEntity("/auther/email/{email}", AutherDto.class);
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
		
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
		//assertThat(responseEntity.getBody()).isEqualTo("OK");
	}
	
	@Test
	public void findByEmailNotFoundTest()
	{
		String email="john@example.com";
		ResponseEntity<AutherDto> responseEntity= restTemplate.getForEntity("/auther/email/{email}", AutherDto.class,  email);
		assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
		
		
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
		//assertThat(responseEntity.getBody()).isEqualTo("OK");
	}
}
